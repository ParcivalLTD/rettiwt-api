"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cursor = exports.CursoredData = void 0;
// MODELS
var Tweet_1 = require("./Tweet");
var User_1 = require("./User");
/**
 * The data that us fetched batch-wise along with a cursor.
 *
 * @typeParam T - Type of data to be stored in the list.
 *
 * @public
 */
var CursoredData = /** @class */ (function () {
    /**
     * @param list - The list of data item to store.
     * @param next - The cursor to the next batch of data.
     */
    function CursoredData(list, next) {
        if (list === void 0) { list = []; }
        if (next === void 0) { next = ''; }
        /** The list of data of the given type. */
        this.list = [];
        // Deserializing the input raw data and storing it in the list
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var item = list_1[_i];
            // If the item is a valid raw tweet
            if (item && item.__typename == 'Tweet' && item.rest_id) {
                this.list.push(new Tweet_1.Tweet(item));
            }
            // If the item is a valid raw user
            else if (item && item.__typename == 'User' && item.rest_id && item.id) {
                this.list.push(new User_1.User(item));
            }
        }
        // Initializing cursors
        this.next = new Cursor(next);
    }
    return CursoredData;
}());
exports.CursoredData = CursoredData;
/**
 * The cursor to the batch of data to be fetched.
 *
 * @public
 */
var Cursor = /** @class */ (function () {
    /**
     * Initializes a new cursor from the given cursor string.
     *
     * @param cursorStr - The string representation of the cursor.
     */
    function Cursor(cursorStr) {
        this.value = cursorStr;
    }
    return Cursor;
}());
exports.Cursor = Cursor;
//# sourceMappingURL=CursoredData.js.map